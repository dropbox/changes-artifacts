// Code generated by go-bindata.
// sources:
// migrations/1_initial.sql
// migrations/2_index_artifactid_size.sql
// migrations/3_add_relative_path.sql
// migrations/4_byte_array.sql
// migrations/README
// DO NOT EDIT!

package database

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations1_initialSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\x41\x73\xba\x30\x10\xc5\xef\x7c\x8a\x1d\x2e\xea\xfc\xf5\xf4\x3f\x7a\xc2\x9a\xb6\x99\x22\x2a\x84\xa9\xf6\x16\xc3\xaa\x19\x31\x30\x10\xc6\xb6\x9f\xbe\x09\x88\xd2\xce\xb4\xb6\xc7\xf7\xf2\xd8\xfd\xed\xb2\xa3\x11\xfc\x3b\xca\x5d\xc1\x35\x42\x9c\x3b\x46\x46\x4b\x1f\xa4\x82\x12\x85\x96\x99\x82\x5e\x9c\xf7\x40\x96\x80\xaf\x28\x2a\x8d\x09\x9c\xf6\xa8\x40\xef\x8d\xd5\x7c\x67\x43\x46\xf0\x3c\x4f\x25\x26\xce\x5d\x48\x3c\x46\x80\x79\x13\x9f\x00\xbd\x87\x60\xce\x80\xac\x68\xc4\x22\xd8\x54\xe2\x80\x1a\xfa\x0e\x40\x62\xfa\x89\x34\x2b\x4d\x3d\x46\x67\x24\x62\xde\x6c\x01\xcf\x94\x3d\xd6\x12\x5e\xe6\x01\x19\xb6\xb1\x02\xb9\xbe\x91\x93\xe6\x99\xac\x58\xdd\x2c\x88\x7d\x1f\x16\x21\x9d\x79\xe1\x1a\x9e\xc8\xda\xbe\x67\x27\x85\x45\x1d\xb1\xaa\xd4\x76\x5a\xab\x9c\xc1\xf8\x27\x60\x5e\x68\xb9\xe5\xa2\x41\x6e\xe8\xcf\x9d\xfe\x08\x37\xa1\x0f\x11\x09\xa9\xe7\x7f\x4b\xa8\xf8\x11\xaf\x80\xff\xab\x22\xbd\x2a\xf9\x8e\xb6\x02\x0d\xbe\xd0\xd7\x10\xc8\x93\x54\x2a\x3c\x4a\x55\x5e\xcc\x38\xa0\xcb\x98\x40\xbf\x45\x1e\xd6\xe5\x07\x37\xa6\x4d\xb3\x9d\xd8\x57\xea\x00\x7d\x57\x26\xee\x0d\x66\x18\x82\xdb\xae\xe7\x9c\xb6\x7c\xe0\x6e\xde\x34\x66\xdb\x6d\x89\xba\x63\xda\x11\x3a\x52\x64\x4a\xa3\x32\x01\x0b\x6c\xa0\x9c\xee\x15\x4e\xcd\xcf\x6a\xef\xf0\x72\x84\xd6\xfc\xd5\x19\x16\x59\x9a\x9a\xd7\x0d\x17\x07\x67\x1a\xce\x17\xe7\x49\x9b\x4d\x8c\xbb\x56\x4b\xff\xc9\x6c\x77\x30\x76\x3e\x02\x00\x00\xff\xff\x08\x1b\xf1\xb5\x19\x03\x00\x00")

func migrations1_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations1_initialSql,
		"migrations/1_initial.sql",
	)
}

func migrations1_initialSql() (*asset, error) {
	bytes, err := migrations1_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/1_initial.sql", size: 793, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _migrations2_index_artifactid_sizeSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\x72\x0e\x72\x75\x0c\x71\x55\xf0\xf4\x73\x71\x8d\x50\xc8\xc9\x4f\x4f\xce\x28\xcd\xcb\x8e\x4f\x2c\x2a\xc9\x4c\x4b\x4c\x2e\xc9\x4c\x89\x2f\xce\xac\x4a\x8d\xcf\x49\x2c\x2e\x51\xf0\xf7\x83\x2b\x50\xd0\x40\xa8\xd0\x51\x00\x29\x51\x70\x71\x0d\x76\x56\xf0\x0b\xf5\xf1\x09\x56\xf0\x71\x0c\x0e\xd1\xb4\xe6\xe2\x42\xb6\xca\x25\xbf\x3c\x8f\xcb\x25\xc8\x3f\x80\x18\xab\xac\xb9\x00\x01\x00\x00\xff\xff\x72\xaa\x21\x25\xa6\x00\x00\x00")

func migrations2_index_artifactid_sizeSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations2_index_artifactid_sizeSql,
		"migrations/2_index_artifactid_size.sql",
	)
}

func migrations2_index_artifactid_sizeSql() (*asset, error) {
	bytes, err := migrations2_index_artifactid_sizeSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/2_index_artifactid_size.sql", size: 166, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _migrations3_add_relative_pathSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x2c\x2a\xc9\x4c\x4b\x4c\x2e\x51\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\x28\x4a\xcd\x49\x2c\xc9\x2c\x4b\x2d\x48\x2c\xc9\x50\x08\x73\x0c\x72\xf6\x70\x0c\xd2\x30\x32\x35\xd5\xb4\xe6\x0a\x0d\x70\x71\x0c\x41\xd2\x15\xec\x1a\x82\xaa\xdc\x56\x21\x2f\x31\x37\x55\x21\xdc\xc3\x35\xc8\x15\x55\xc6\x33\x58\xc1\x2f\xd4\xc7\xc7\x9a\x8b\x0b\xd9\x39\x2e\xf9\xe5\x79\xd8\x1d\xe4\x12\xe4\x1f\x00\x73\x91\x12\xb2\x49\x4a\xd6\x5c\x80\x00\x00\x00\xff\xff\xd3\x97\xe9\xe4\xd1\x00\x00\x00")

func migrations3_add_relative_pathSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations3_add_relative_pathSql,
		"migrations/3_add_relative_path.sql",
	)
}

func migrations3_add_relative_pathSql() (*asset, error) {
	bytes, err := migrations3_add_relative_pathSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/3_add_relative_path.sql", size: 209, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _migrations4_byte_arraySql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\xc8\xc9\x4f\x4f\xce\x28\xcd\xcb\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\x48\xce\xcf\x2b\x49\xcd\x2b\x89\x4f\xaa\x2c\x49\x2d\x56\x70\x8a\x0c\x71\x75\xb4\xe6\xe2\x42\x36\xc4\x25\xbf\x3c\x0f\xbb\x31\x2e\x41\xfe\x01\x58\xcd\xb1\xe6\x02\x04\x00\x00\xff\xff\x4f\xc8\xc7\x20\x86\x00\x00\x00")

func migrations4_byte_arraySqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations4_byte_arraySql,
		"migrations/4_byte_array.sql",
	)
}

func migrations4_byte_arraySql() (*asset, error) {
	bytes, err := migrations4_byte_arraySqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/4_byte_array.sql", size: 134, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _migrationsReadme = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x53\xcd\x6e\xdb\x30\x0c\xbe\xeb\x29\x08\xf4\xd2\x06\x89\x73\x0f\xba\x02\x2d\xb2\xe3\x7e\x80\x06\xd8\x31\x91\x2d\xda\x16\x2a\x4b\xaa\x48\xc5\xf3\xdb\x8f\xb2\x97\x60\xcd\x0e\x03\x66\x20\x87\x48\x24\xbf\x3f\xea\x39\xb1\x6d\x75\xc3\x04\xaf\x1c\x12\xc2\x5e\xb3\xae\x35\x21\x7c\xb1\x5d\xd2\x6c\x83\x27\xf5\xe9\xdf\x9f\x52\xcf\xc6\x80\xf6\x13\x0c\x97\x3e\xa0\x26\xd9\x28\x83\xd9\xb2\x43\x03\x8f\x84\xef\x47\x1f\x9e\x8e\x8f\xd4\x87\xc4\xc7\x01\x89\x74\x87\x4f\x15\xbd\x3b\xe0\x00\xdc\x5b\x82\x36\x38\x83\xa9\x82\xd7\xdf\xbd\xa3\x75\x0e\x6a\x54\xf8\x13\x9b\xcc\x32\xc5\xfa\xeb\x20\x08\x69\xae\xfd\xee\xb0\x10\x26\x44\xe8\x99\x23\xed\xb6\xdb\xce\x72\x9f\xeb\xaa\x09\xc3\x36\xe5\x1a\xfd\x79\x2b\x20\x9b\x85\x1a\xde\x8d\xc9\xb2\xf5\xdd\xe6\x4a\xb5\xe0\x26\xd5\x65\x6b\xd0\x59\x8f\x04\xc2\xbe\x0f\x63\x61\x55\x6a\x51\xb8\xe1\xdf\xc2\x2a\xa5\xbe\x7e\x3b\x7c\xde\x5d\x08\xa4\xec\xe1\xd4\x05\xe8\xd0\x63\xc1\x81\xcd\x19\xaa\x6d\x55\x55\x27\xd0\x2d\x63\x82\x41\xbf\x09\xec\xec\x52\xd3\x6b\xdf\x09\xd0\xad\xee\x1f\x08\x5a\x52\xc0\xa1\x46\x63\x4a\xb1\x20\xab\x5b\x64\xd0\x04\x1a\x04\xa9\xb5\x0e\xe1\x7e\x1e\xc0\x49\x7b\x72\x4b\x95\xfc\x8d\x98\x44\xd2\x20\x86\xd5\xd3\x07\x52\xa7\x07\x01\x11\x77\x42\xe6\x42\xd8\x17\x0c\xb9\x57\xd7\xfb\xf5\x8d\xd8\x19\x63\x8e\x61\x25\x6a\x57\x12\x86\x64\xd0\xb8\x6c\xb0\xe4\x2d\xbf\x18\x9d\x45\x23\x66\x1c\x90\x8a\xad\x60\x2e\x2b\xf4\x87\xbf\xf7\xb5\x6e\xde\x46\x9d\x0c\x81\x84\x12\xe5\xb4\x76\x96\xa7\x87\x9d\xda\xfc\xcf\xa7\xf6\x39\x15\xa8\x46\xa0\x3d\x0b\x21\xc6\x0b\x5f\x16\x16\xb4\x86\x51\x4c\x5c\x76\x66\xd6\x43\x7a\xf8\xc0\x87\x7b\xcd\xa5\x66\x0c\xd9\x99\x12\x77\x4c\xc1\x54\xf0\x32\x81\xc1\x56\x67\xc7\x6b\x25\x6d\xa2\x61\x1e\xb7\xe8\x2f\xf9\xea\x4e\x5b\x4f\x3c\xcf\x8c\x09\xcf\x36\x64\x72\xa5\x29\xba\x30\x89\x23\x67\x4c\x54\x58\x2c\xa1\xac\x64\xd3\x65\xfe\x4a\x92\xe7\xa6\x9f\x9b\x2e\x05\xc1\xab\x02\x29\x69\x1c\x42\x39\xb4\xed\xb4\x90\x5a\x00\x9b\xe0\xc5\xcb\x8c\x65\x41\x66\xdc\x65\x81\xae\x02\xd6\x50\xe7\x21\x42\x8e\x37\x69\x39\x3c\xa3\x03\x2a\x4f\xb9\xbc\x15\xb5\x18\x74\x2c\x43\xab\x2e\xdc\x11\x72\x8e\xfb\x97\x4a\xfd\x0a\x00\x00\xff\xff\x23\xa1\xeb\xb5\xf7\x03\x00\x00")

func migrationsReadmeBytes() ([]byte, error) {
	return bindataRead(
		_migrationsReadme,
		"migrations/README",
	)
}

func migrationsReadme() (*asset, error) {
	bytes, err := migrationsReadmeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/README", size: 1015, mode: os.FileMode(436), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/1_initial.sql": migrations1_initialSql,
	"migrations/2_index_artifactid_size.sql": migrations2_index_artifactid_sizeSql,
	"migrations/3_add_relative_path.sql": migrations3_add_relative_pathSql,
	"migrations/4_byte_array.sql": migrations4_byte_arraySql,
	"migrations/README": migrationsReadme,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"1_initial.sql": &bintree{migrations1_initialSql, map[string]*bintree{
		}},
		"2_index_artifactid_size.sql": &bintree{migrations2_index_artifactid_sizeSql, map[string]*bintree{
		}},
		"3_add_relative_path.sql": &bintree{migrations3_add_relative_pathSql, map[string]*bintree{
		}},
		"4_byte_array.sql": &bintree{migrations4_byte_arraySql, map[string]*bintree{
		}},
		"README": &bintree{migrationsReadme, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

